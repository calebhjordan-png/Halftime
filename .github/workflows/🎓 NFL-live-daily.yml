name: NFL Live (Daily Planner)

on:
  schedule:
    - cron: '0 6 * * *'
    - cron: '*/15 15-23 * * *'
    - cron: '*/15 0-4 * * *'
  workflow_dispatch:
    inputs:
      target_date_et:
        description: 'YYYYMMDD (blank = today ET)'
        required: false
        default: ''

jobs:
  plan:
    runs-on: ubuntu-latest
    outputs:
      games: ${{ steps.out.outputs.games }}
    env:
      MAX_AHEAD_MIN: ${{ vars.MAX_AHEAD_MIN || 120 }}
      GRACE_PAST_MIN: ${{ vars.GRACE_PAST_MIN || 60 }}
    steps:
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - id: out
        name: Build near-term game matrix (NFL)
        run: |
          node - <<'NODE'
          (async () => {
            const tz = 'America/New_York';
            const input = (process.env.INPUT || '').trim();
            const maxAheadMin = parseInt(process.env.MAX_AHEAD_MIN || '120', 10);
            const gracePastMin = parseInt(process.env.GRACE_PAST_MIN || '60', 10);

            function toYYYYMMDD(d) {
              const p = new Intl.DateTimeFormat('en-US', { timeZone: tz, year: 'numeric', month: '2-digit', day: '2-digit' }).formatToParts(d);
              const g = k => p.find(x => x.type === k)?.value || '';
              return `${g('year')}${g('month')}${g('day')}`;
            }
            function todayET() {
              const now = new Date();
              const p = new Intl.DateTimeFormat('en-US', { timeZone: tz, year: 'numeric', month: '2-digit', day: '2-digit' }).formatToParts(now);
              const y = +p.find(q => q.type === 'year').value, m = +p.find(q => q.type === 'month').value, d = +p.find(q => q.type === 'day').value;
              const etMid = new Date(Date.UTC(y, m - 1, d, 5));
              return toYYYYMMDD(etMid);
            }

            const yyyymmdd = (/^\d{8}$/.test(input) ? input : todayET());
            const url = `https://site.api.espn.com/apis/site/v2/sports/football/nfl/scoreboard?dates=${yyyymmdd}`;

            const res = await fetch(url, { headers: { 'User-Agent': 'nfl-live-daily/2.0' } });
            if (!res.ok) throw new Error('HTTP ' + res.status);
            const sb = await res.json();

            const nowSec = Math.floor(Date.now()/1000);
            const maxAheadSec = maxAheadMin * 60;
            const gracePastSec = gracePastMin * 60;

            const seen = new Set();
            const games = (sb.events || [])
              .filter(e => e && !seen.has(e.id) && seen.add(e.id))
              .map(e => ({
                game_id: String(e.id),
                kickoff_epoch: Math.floor(new Date(e.date).getTime()/1000)
              }))
              .filter(g => {
                const wait = g.kickoff_epoch - nowSec;
                return (wait <= maxAheadSec) && (wait >= -gracePastSec);
              });

            require('fs').appendFileSync(process.env.GITHUB_OUTPUT, `games=${JSON.stringify(games)}\n`);
          })().catch(e => { console.error(e); process.exit(1); });
          NODE
        env:
          INPUT: ${{ github.event.inputs.target_date_et }}

  watchers:
    needs: plan
    if: ${{ needs.plan.outputs.games != '' && needs.plan.outputs.games != '[]' }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.plan.outputs.games) }}
    concurrency:
      group: nfl-live-${{ matrix.game_id }}
      cancel-in-progress: false
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install deps
        run: npm i googleapis

      - name: Short sleep to kickoff+60 (cap wait)
        env:
          WAKE_OFFSET_MIN: ${{ vars.WAKE_OFFSET_MIN || 60 }}
          MAX_SLEEP_MIN:   ${{ vars.MAX_SLEEP_MIN   || 20 }}
        run: |
          NOW=$(date +%s)
          TARGET=$(( ${{ matrix.kickoff_epoch }} + WAKE_OFFSET_MIN*60 ))
          WAIT=$(( TARGET - NOW ))
          CAP=$(( MAX_SLEEP_MIN*60 ))
          if [ $WAIT -le 0 ]; then
            echo "Kick already passed; proceeding immediately."
            exit 0
          fi
          if [ $WAIT -gt $CAP ]; then
            echo "Too early (need $WAIT s, cap $CAP s). Skipping now; planner will re-queue closer to kickoff."
            exit 0
          fi
          echo "Sleeping $WAIT sec until kickoff+offset..."
          sleep $WAIT

      - name: Start live engine
        env:
          GOOGLE_SHEET_ID: ${{ secrets.GOOGLE_SHEET_ID }}
          GOOGLE_SERVICE_ACCOUNT: ${{ secrets.GOOGLE_SERVICE_ACCOUNT }}
          LEAGUE: nfl
          TAB_NAME: NFL
          TARGET_GAME_ID: ${{ matrix.game_id }}
          MAX_TOTAL_MIN: 200
        run: node live-game.mjs
