name: NFL Live (Daily Planner)

on:
  schedule:
    - cron: '0 6 * * *'   # ~02:00 ET depending on DST
  workflow_dispatch:
    inputs:
      target_date_et:
        description: 'YYYYMMDD (blank = tomorrow ET)'
        required: false
        default: ''

jobs:
  plan:
    runs-on: ubuntu-latest
    outputs:
      games: ${{ steps.out.outputs.games }}
    steps:
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - id: out
        name: Build game matrix for target ET date
        run: |
          node -e "
          (async () => {
            const tz='America/New_York';
            const input=(process.env.INPUT||'').trim();
            function toYYYYMMDD(d){
              const p=new Intl.DateTimeFormat('en-US',{timeZone:tz,year:'numeric',month:'2-digit',day:'2-digit'}).formatToParts(d);
              const g=k=>p.find(x=>x.type===k)?.value||'';
              return `${g('year')}${g('month')}${g('day')}`;
            }
            function tomorrow(){
              const now=new Date();
              const p=new Intl.DateTimeFormat('en-US',{timeZone:tz,year:'numeric',month:'2-digit',day:'2-digit'}).formatToParts(now);
              const y=+p.find(q=>q.type==='year').value, m=+p.find(q=>q.type==='month').value, d=+p.find(q=>q.type==='day').value;
              const etMid=new Date(Date.UTC(y,m-1,d,5));
              return toYYYYMMDD(new Date(etMid.getTime()+86400000));
            }
            const yyyymmdd = (/^\\d{8}$/.test(input) ? input : tomorrow());
            const url = `https://site.api.espn.com/apis/site/v2/sports/football/nfl/scoreboard?dates=${yyyymmdd}`;
            const res = await fetch(url,{headers:{'User-Agent':'nfl-live-daily/1.0'}});
            if(!res.ok) throw new Error('HTTP '+res.status);
            const sb = await res.json();
            const seen = new Set();
            const games = (sb.events||[])
              .filter(e=>e && !seen.has(e.id) && seen.add(e.id))
              .map(e=>({ game_id: e.id, kickoff_epoch: Math.floor(new Date(e.date).getTime()/1000) }));
            require('fs').appendFileSync(process.env.GITHUB_OUTPUT, 'games='+JSON.stringify(games)+'\\n');
          })().catch(e=>{console.error(e);process.exit(1);});
          "
        env:
          INPUT: ${{ github.event.inputs.target_date_et }}

  watchers:
    needs: plan
    if: ${{ needs.plan.outputs.games != '' && needs.plan.outputs.games != '[]' }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.plan.outputs.games) }}
    concurrency:
      group: nfl-live-${{ matrix.game_id }}
      cancel-in-progress: false
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install deps
        run: npm i googleapis

      - name: Sleep until kickoff+60
        env:
          WAKE_OFFSET_MIN: ${{ vars.WAKE_OFFSET_MIN || 60 }}
        run: |
          NOW=$(date +%s)
          TARGET=$(( ${{ matrix.kickoff_epoch }} + WAKE_OFFSET_MIN*60 ))
          WAIT=$(( TARGET - NOW ))
          [ $WAIT -lt 0 ] && WAIT=0
          echo "Sleeping $WAIT sec for ${{ matrix.game_id }}"
          sleep $WAIT

      - name: Start live engine
        env:
          GOOGLE_SHEET_ID: ${{ secrets.GOOGLE_SHEET_ID }}
          GOOGLE_SERVICE_ACCOUNT: ${{ secrets.GOOGLE_SERVICE_ACCOUNT }}
          LEAGUE: nfl
          TAB_NAME: NFL
          TARGET_GAME_ID: ${{ matrix.game_id }}
          MAX_TOTAL_MIN: 200
        run: node live-game.mjs
