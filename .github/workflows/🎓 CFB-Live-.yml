name: "üéì CFB Live"

on:
  workflow_dispatch:
    inputs:
      game_id:
        description: "Optional ESPN game id to focus on"
        required: false
        default: ""
      debug:
        description: "Enable verbose debug logging"
        required: false
        default: "0"
  schedule:
    # ET window only (10:00 ‚Üí 01:59, pinned with TZ below)
    - cron: "0 10-23 * * *"      # top of every hour 10:00‚Äì23:00 ET
    - cron: "0 0-1 * * *"        # top of every hour 00:00‚Äì01:00 ET
    - cron: "*/5 10-23 * * *"    # every 5 minutes 10:00‚Äì23:59 ET
    - cron: "*/5 0-1 * * *"      # every 5 minutes 00:00‚Äì01:59 ET

env:
  TZ: America/New_York
  LEAGUE: college-football
  TAB_NAME: CFB

jobs:
  run:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install deps
        run: npm i axios googleapis

      # --- Scan ESPN directly (not the sheet) to decide if we should run at 5-min cadence,
      #     and to collect specific game IDs that are live (<= HT).
      - name: Scan ESPN for live (‚â§ HT) games
        id: scan
        env:
          ESPN_SPORT: football
          ESPN_LEAGUE: college-football
        shell: bash
        run: |
          set -euo pipefail
          # Which cron string fired this run? (empty for workflow_dispatch)
          SCHED="${{ github.event.schedule || '' }}"
          echo "schedule_fired=$SCHED" >> "$GITHUB_OUTPUT"

          # Default outputs
          echo "live=false" >> "$GITHUB_OUTPUT"
          echo "ids="       >> "$GITHUB_OUTPUT"

          # If this is a manual run, short-circuit with any provided game_id
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && -n "${{ github.event.inputs.game_id }}" ]]; then
            echo "live=true"        >> "$GITHUB_OUTPUT"
            echo "ids=${{ github.event.inputs.game_id }}" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          # Use the public ‚Äúscoreboard‚Äù (site) API because it‚Äôs fast & reliable for state/period.
          URL="https://site.api.espn.com/apis/site/v2/sports/${ESPN_SPORT}/${ESPN_LEAGUE}/scoreboard"
          curl -sS "$URL" > /tmp/scoreboard.json

          # Pull live/halftime games with jq; consider ‚Äúin‚Äù state and period <= 2 (1st/2nd) or halftime.
          IDS=$(jq -r '
            .events[]
            | select(.status.type.state=="in")
            | select((.status.period|tonumber) <= 2 or (.status.type.description|ascii_downcase|test("halftime")))
            | .id
          ' /tmp/scoreboard.json | tr '\n' ' ' | sed 's/  */ /g' | sed 's/[[:space:]]$//')

          if [[ -n "$IDS" ]]; then
            echo "Live (‚â§HT) game IDs: $IDS"
            echo "live=true" >> "$GITHUB_OUTPUT"
            echo "ids=$IDS"  >> "$GITHUB_OUTPUT"
          else
            echo "No CFB games live at or before halftime."
          fi

      # --- Decide if we should run the updater on this tick.
      # For top-of-hour: always run (catch late starts, fix statuses, etc.)
      # For 5-minute ticks: only run if `scan.live == true`.
      - name: Decide to run updater
        id: decide
        shell: bash
        run: |
          set -euo pipefail
          SCHED="${{ steps.scan.outputs.schedule_fired }}"
          LIVE="${{ steps.scan.outputs.live }}"
          RUN="no"

          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            RUN="yes"
          elif [[ "$SCHED" =~ ^0[[:space:]] ]]; then
            # a top-of-hour cron fired (starts with "0 ")
            RUN="yes"
          else
            # a */5 cron fired; only run if live
            [[ "$LIVE" == "true" ]] && RUN="yes"
          fi

          echo "run_updater=$RUN" >> "$GITHUB_OUTPUT"
          echo "ids=${{ steps.scan.outputs.ids }}" >> "$GITHUB_OUTPUT"
          echo "Decision: $RUN"

      # --- Run updater. If we have specific live IDs, run once per ID so wrong sheet dates
      #     can‚Äôt block updates. Otherwise run a single general pass.
      - name: Run live updater (CFB)
        if: steps.decide.outputs.run_updater == 'yes'
        env:
          GOOGLE_SHEET_ID: ${{ secrets.GOOGLE_SHEET_ID }}
          GOOGLE_SERVICE_ACCOUNT: ${{ secrets.GOOGLE_SERVICE_ACCOUNT }}
          LEAGUE: ${{ env.LEAGUE }}
          TAB_NAME: ${{ env.TAB_NAME }}
          DEBUG_MODE: ${{ github.event.inputs.debug || '0' }}
        shell: bash
        run: |
          set -euo pipefail
          IDS="${{ steps.decide.outputs.ids }}"
          if [[ -n "$IDS" ]]; then
            for id in $IDS; do
              echo "‚Üí Updating focused game $id"
              GAME_ID="$id" node live-game.mjs
            done
          else
            echo "‚Üí General pass (no focused IDs)"
            node live-game.mjs
          fi
