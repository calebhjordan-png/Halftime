name: NFL Live

on:
  schedule:
    # Hourly during window (top of hour)
    - cron: "0 14-23 * * *"
    - cron: "0 0-6 * * *"
    # Every 5 minutes during window
    - cron: "*/5 14-23 * * *"
    - cron: "*/5 0-6 * * *"
  workflow_dispatch:

jobs:
  run:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install deps
        run: npm i axios googleapis

      - name: Check ET window
        id: window
        run: |
          node - <<'NODE'
          const { writeFileSync } = require('fs');
          function hourET() {
            const parts = new Intl.DateTimeFormat('en-US', {
              timeZone: 'America/New_York', hour12: false, hour: '2-digit'
            }).formatToParts(new Date());
            return Number(parts.find(p=>p.type==='hour').value);
          }
          const h = hourET();
          const ok = (h >= 10 && h <= 23) || (h >= 0 && h <= 2);
          writeFileSync(process.env.GITHUB_OUTPUT, `ok=${ok}\n`);
          console.log('ET hour =', h, 'ok_window =', ok);
          NODE

      - name: Decide from ESPN scoreboard (NFL)
        if: steps.window.outputs.ok == 'true'
        id: scan
        env:
          LEAGUE: nfl
        run: |
          node - <<'NODE'
          const { appendFileSync } = require('fs');
          const axios = require('axios');
          const league = process.env.LEAGUE;
          const url = `https://site.api.espn.com/apis/site/v2/sports/football/${league}/scoreboard`;
          (async () => {
            try {
              const { data } = await axios.get(url, { timeout: 15000 });
              const events = data?.events || [];
              const should = events.some(ev => {
                const st = ev?.competitions?.[0]?.status || {};
                const name  = String(st?.type?.name || '').toLowerCase();
                const short = String(st?.type?.shortDetail || '').toLowerCase();
                const completed = !!st?.type?.completed;
                const period = Number(st?.period || 0);

                if (completed) return false;
                if (short.includes('halftime')) return true;
                if (/\b(1st|2nd)\b/.test(short)) return true;
                if (name.includes('in') && period <= 2) return true;
                return false;
              });
              console.log('should_run =', should);
              appendFileSync(process.env.GITHUB_OUTPUT, `should_run=${should}\n`);
            } catch (e) {
              console.log('scoreboard error:', e.message);
              appendFileSync(process.env.GITHUB_OUTPUT, `should_run=false\n`);
            }
          })();
          NODE

      - name: Run live updater (NFL)
        if: steps.window.outputs.ok == 'true' && steps.scan.outputs.should_run == 'true'
        env:
          GOOGLE_SHEET_ID: ${{ secrets.GOOGLE_SHEET_ID }}
          GOOGLE_SERVICE_ACCOUNT: ${{ secrets.GOOGLE_SERVICE_ACCOUNT }}
          LEAGUE: "nfl"
          TAB_NAME: "NFL"
        run: node live-game.mjs
