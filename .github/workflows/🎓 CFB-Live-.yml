name: 🎓 CFB Live

on:
  # Manual kick
  workflow_dispatch:
    inputs:
      force_5_minute_loop:
        description: "Force 5-minute loop (debug)"
        required: false
        default: "false"
  # Let the gate decide if we actually requeue every 5 minutes
  schedule:
    - cron: "0 * * * *"  # top of every hour (UTC)
  # Used by the requeue step (avoids addressing a file by name)
  repository_dispatch:
    types: [cfb_live_requeue]

permissions:
  contents: write
  actions: write

jobs:
  run:
    runs-on: ubuntu-latest
    steps:
      - name: Set up job
        run: echo "Start CFB Live run…"

      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install deps for live updater
        run: npm i axios googleapis

      # ❗️Gate script uses luxon (time window check) + axios (ESPN scoreboard API)
      - name: Install gate deps
        run: npm i luxon axios

      # ───────────────────────── GATE ─────────────────────────
      # Checks: ET time window + ESPN scoreboard → any live CFB game pre-3rd?
      - name: Gate for 5-minute cycle (CFB)
        id: gate
        env:
          FORCE_5: ${{ github.event.inputs.force_5_minute_loop }}
        run: |
          node - <<'JS'
          const { DateTime } = require('luxon');
          const axios = require('axios');

          const force = (process.env.FORCE_5 || '').toLowerCase() === 'true';

          const nowET = DateTime.now().setZone('America/New_York');
          const withinWindow = (nowET.hour >= 10 || nowET.hour <= 1); // 10:00–01:59 ET
          const dateParam = nowET.toFormat('yyyyLLdd');

          // Default: not in 5-min loop
          let hasPre3rd = false;

          const scoreboardUrl = `https://site.api.espn.com/apis/site/v2/sports/football/college-football/scoreboard?dates=${dateParam}`;

          (async () => {
            try {
              const { data } = await axios.get(scoreboardUrl, { timeout: 15000 });
              const events = Array.isArray(data?.events) ? data.events : [];

              // Inspect each game's status
              for (const ev of events) {
                const comp = ev?.competitions?.[0];
                const st = comp?.status;
                const state = (st?.type?.state || '').toLowerCase();  // "in" | "pre" | "post"
                const detail = (st?.type?.shortDetail || st?.type?.detail || '').toLowerCase();
                const period = Number(st?.period ?? comp?.status?.period ?? 0);

                const isLive = state === 'in';
                const isHalf = /\bhalftime\b/.test(detail);

                // Pre-3rd if Q1, Q2, or explicitly Halftime
                const pre3rd = isLive && (period < 3 || isHalf);

                if (pre3rd) { hasPre3rd = true; break; }
              }
            } catch (e) {
              console.log('Gate warning:', e?.message || e);
            }

            // Outputs to control later steps
            const payload = {
              et: nowET.toFormat('EEE yyyy-LL-dd HH:mm'),
              withinWindow, hasPre3rd, force
            };
            console.log('Gate:', payload);

            // Write outputs
            const fs = require('fs');
            fs.appendFileSync(process.env.GITHUB_OUTPUT,
              `within_window=${withinWindow}\n` +
              `has_pre3rd=${hasPre3rd}\n` +
              `force=${force}\n`
            );
          })();
          JS

      # ───────────────────── Live updater run ─────────────────────
      - name: Run live updater (CFB)
        env:
          GOOGLE_SHEET_ID: ${{ secrets.GOOGLE_SHEET_ID }}
          GOOGLE_SERVICE_ACCOUNT: ${{ secrets.GOOGLE_SERVICE_ACCOUNT }}
          LEAGUE: college-football
          TAB_NAME: CFB
        run: node live-game.mjs

      # ───────────────────── 5-minute loop control ─────────────────────
      - name: Sleep 5 minutes when pre-3rd games exist
        if: ${{ steps.gate.outputs.within_window == 'true' && (steps.gate.outputs.has_pre3rd == 'true' || steps.gate.outputs.force == 'true') }}
        run: sleep 300

      - name: Re-queue workflow (repository_dispatch)
        if: ${{ steps.gate.outputs.within_window == 'true' && (steps.gate.outputs.has_pre3rd == 'true' || steps.gate.outputs.force == 'true') }}
        env:
          GH_PAT_WORKFLOW: ${{ secrets.GH_PAT_WORKFLOW }}
        run: |
          curl -sS -X POST \
            -H "Authorization: token ${GH_PAT_WORKFLOW}" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/${GITHUB_REPOSITORY}/dispatches \
            -d '{"event_type":"cfb_live_requeue"}'
