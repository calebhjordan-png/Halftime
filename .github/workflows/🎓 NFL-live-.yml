name: NFL Live
on:
  workflow_dispatch: {}
  schedule:
    - cron: "0 14-23 * * *"
    - cron: "0 0-6 * * *"

jobs:
  live:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install deps used by live scripts
        run: npm i googleapis

      - name: Collect today’s Game IDs from sheet
        id: ids
        # ... (unchanged)
        run: |
          # existing code to find today’s IDs
          node - <<'NODE'
          # ...

      # ⬇⬇ REPLACE your old "Run live-game..." step with this one ⬇⬇
      - name: Run live-game oneshot for each ID in parallel (with odds debug)
        if: steps.ids.outputs.list != '[]'
        shell: bash
        env:
          LEAGUE: nfl
          TAB_NAME: NFL
          GOOGLE_SHEET_ID: ${{ secrets.GOOGLE_SHEET_ID }}
          GOOGLE_SERVICE_ACCOUNT: ${{ secrets.GOOGLE_SERVICE_ACCOUNT }}
          IDS_JSON: ${{ steps.ids.outputs.list }}
          ONESHOT: "true"
          DEBUG_ODDS: "true"         # prints all odds blocks
          FORCE_STATUS_WRITE: "true" # ensures Status updates in oneshot
        run: |
          ids=$(node -e "process.stdout.write(process.env.IDS_JSON||'[]')")
          node -e "
            const ids = JSON.parse(process.argv[1]||'[]');
            if (!ids.length) process.exit(0);
            (async () => {
              const { spawn } = await import('node:child_process');
              const procs = ids.map(id => new Promise((res, rej) => {
                const p = spawn('node',['live-game.mjs'],{
                  stdio:'inherit',
                  env:{...process.env, TARGET_GAME_ID:String(id)}
                });
                p.on('exit', c => c===0 ? res() : rej(new Error('exit '+c)));
              }));
              await Promise.allSettled(procs);
            })().catch(e => { console.error(e); process.exit(1); });
          " "$ids"
