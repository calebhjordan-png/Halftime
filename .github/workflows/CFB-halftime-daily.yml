name: CFB Halftime (Daily Morning Schedule)

on:
  workflow_dispatch:
  schedule:
    # 10:00 AM ET during Daylight Time (14:00 UTC). Adjust if you prefer.
    - cron: "0 14 * * *"

jobs:
  build-matrix:
    name: Build today's game schedule
    runs-on: ubuntu-latest
    outputs:
      games_json: ${{ steps.collect.outputs.games_json }}
    steps:
      - name: Collect today’s CFB games and compute kickoff+60
        id: collect
        shell: bash
        run: |
          set -euo pipefail

          ET_TZ="America/New_York"
          # Query “today” in ET. (Uncomment tomorrow if you want 2-day lookahead.)
          today_et="$(TZ=$ET_TZ date +%Y%m%d)"
          # tomorrow_et="$(TZ=$ET_TZ date -d '+1 day' +%Y%m%d)"

          fetch() {
            curl -sS "https://site.api.espn.com/apis/site/v2/sports/football/college-football/scoreboard?dates=$1&groups=80&limit=300"
          }

          tmp="$(mktemp)"
          { fetch "$today_et"; \
            # fetch "$tomorrow_et"; \
          } | jq -s '[.[].events[]?] | unique_by(.id) | [ .[] | {id:.id, kickoff:.date} ]' > "$tmp"

          now_ts=$(date -u +%s)
          out='[]'

          # Build array in bash to tolerate ESPN times with/without seconds (e.g. 2025-10-11T23:30Z).
          while IFS=$'\t' read -r id kickoff; do
            # Parse kickoff to epoch (UTC)
            ts=$(date -u -d "$kickoff" +%s 2>/dev/null || true)
            if [ -z "${ts:-}" ]; then
              echo "Skipping unparsable kickoff: id=$id kickoff=$kickoff"
              continue
            fi

            run_ts=$(( ts + 60*60 ))       # kickoff + 60 minutes
            delay=$(( run_ts - now_ts ))

            # Keep only games whose (kickoff+60) is within the next ~20 hours
            if [ $delay -ge 0 ] && [ $delay -le $((20*60*60)) ]; then
              run_iso=$(date -u -d "@$run_ts" +"%Y-%m-%dT%H:%M:%SZ")
              out=$(jq -c --arg id "$id" --arg kickoff "$kickoff" --arg run_iso "$run_iso" --argjson delay "$delay" \
                    '. + [{id:$id, kickoff:$kickoff, run_at:$run_iso, delay:$delay}]' <<<"$out")
            fi
          done < <(jq -r '.[] | [.id, .kickoff] | @tsv' "$tmp")

          echo "Found $(jq -r 'length' <<<"$out") games to schedule."
          # Save for later debug/summary steps
          echo "$out" > games.json
          echo "games_json=$(jq -c '.' <<<"$out")" >> "$GITHUB_OUTPUT"

      - name: Debug / Summary — show scheduled games table
        if: always()
        shell: bash
        run: |
          set -euo pipefail
          ET_TZ="America/New_York"
          if [ ! -s games.json ]; then
            echo "No games.json to display." >> "$GITHUB_STEP_SUMMARY"
            exit 0
          fi

          echo "### CFB games scheduled (kickoff + 60 min)" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          printf "| ID | Kickoff (UTC) | Kickoff (ET) | Run At (UTC) | Run At (ET) | Delay (min) |\n" >> "$GITHUB_STEP_SUMMARY"
          printf "|---|---|---|---|---|---|\n" >> "$GITHUB_STEP_SUMMARY"

          while IFS= read -r row; do
            id=$(jq -r '.id' <<<"$row")
            ko=$(jq -r '.kickoff' <<<"$row")
            ra=$(jq -r '.run_at' <<<"$row")
            delay=$(jq -r '.delay' <<<"$row")

            ko_utc_disp=$(date -u -d "$ko" +"%Y-%m-%d %H:%M %Z" 2>/dev/null || echo "$ko")
            ko_et_disp=$(TZ=$ET_TZ date -d "$ko" +"%Y-%m-%d %I:%M %p %Z" 2>/dev/null || echo "$ko")

            ra_utc_disp=$(date -u -d "$ra" +"%Y-%m-%d %H:%M %Z" 2>/dev/null || echo "$ra")
            ra_et_disp=$(TZ=$ET_TZ date -d "$ra" +"%Y-%m-%d %I:%M %p %Z" 2>/dev/null || echo "$ra")

            delay_min=$(( (delay + 59) / 60 ))  # round up to next minute
            printf "| %s | %s | %s | %s | %s | %s |\n" \
              "$id" "$ko_utc_disp" "$ko_et_disp" "$ra_utc_disp" "$ra_et_disp" "$delay_min" >> "$GITHUB_STEP_SUMMARY"
          done < <(jq -c '.[]' games.json)

      - name: Upload scheduled games JSON (debug)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cfb-games-scheduled
          path: games.json
          if-no-files-found: ignore

  per-game:
    name: Per-game halftime capture
    needs: build-matrix
    if: ${{ needs.build-matrix.outputs.games_json != '' && fromJSON(needs.build-matrix.outputs.games_json).length > 0 }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        game: ${{ fromJSON(needs.build-matrix.outputs.games_json) }}
    concurrency:
      group: cfb-halftime-${{ matrix.game.id }}
      cancel-in-progress: false
    env:
      GOOGLE_SHEET_ID: ${{ secrets.GOOGLE_SHEET_ID }}
      GOOGLE_SERVICE_ACCOUNT: ${{ secrets.GOOGLE_SERVICE_ACCOUNT }}
      TAB_NAME: CFB
      TARGET_GAME_ID: ${{ matrix.game.id }}
      MAX_TOTAL_MIN: "200"
    steps:
      - uses: actions/checkout@v4

      - name: Sleep until kickoff+60 for this game
        shell: bash
        run: |
          set -euo pipefail
          target_iso='${{ matrix.game.run_at }}'
          target_ts=$(date -u -d "$target_iso" +%s)
          now_ts=$(date -u +%s)
          wait=$(( target_ts - now_ts ))
          if [ $wait -le 0 ]; then
            echo "kickoff+60 already passed; continuing immediately."
          else
            echo "Sleeping $wait seconds until $target_iso (UTC)…"
            sleep $wait
          fi

      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: npm

      - name: Install dependencies
        run: |
          if [ -f package-lock.json ]; then npm ci; else npm install; fi
          npx playwright install --with-deps chromium

      - name: Run single-game halftime watcher
        run: node ./CFB-halftime-check.mjs
