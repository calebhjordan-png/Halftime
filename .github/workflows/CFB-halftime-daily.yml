      - name: Collect today’s CFB games and compute kickoff+60
        id: collect
        shell: bash
        run: |
          set -euo pipefail

          ET_TZ="America/New_York"
          # Query “today” in ET. (Uncomment tomorrow if you want 2-day lookahead)
          today_et="$(TZ=$ET_TZ date +%Y%m%d)"
          # tomorrow_et="$(TZ=$ET_TZ date -d '+1 day' +%Y%m%d)"

          fetch() {
            curl -sS "https://site.api.espn.com/apis/site/v2/sports/football/college-football/scoreboard?dates=$1&groups=80&limit=300"
          }

          tmp="$(mktemp)"
          { fetch "$today_et"; \
            # fetch "$tomorrow_et"; \
          } | jq -s '[.[].events[]?] | unique_by(.id) | [ .[] | {id:.id, kickoff:.date} ]' > "$tmp"

          now_ts=$(date -u +%s)
          out='[]'

          # Build array in bash so we can parse flexible ISO strings
          while IFS=$'\t' read -r id kickoff; do
            # Parse kickoff (handles YYYY-MM-DDTHH:MMZ and with seconds too)
            ts=$(date -u -d "$kickoff" +%s 2>/dev/null || true)
            if [ -z "$ts" ]; then
              echo "Skipping unparsable kickoff: id=$id kickoff=$kickoff"
              continue
            fi
            run_ts=$(( ts + 60*60 ))                # +60 minutes
            delay=$(( run_ts - now_ts ))
            # Keep games whose (kickoff+60) is within the next ~20 hours
            if [ $delay -ge 0 ] && [ $delay -le $((20*60*60)) ]; then
              run_iso=$(date -u -d "@$run_ts" +"%Y-%m-%dT%H:%M:%SZ")
              out=$(jq -c --arg id "$id" --arg kickoff "$kickoff" --arg run_iso "$run_iso" --argjson delay "$delay" \
                    '. + [{id:$id, kickoff:$kickoff, run_at:$run_iso, delay:$delay}]' <<<"$out")
            fi
          done < <(jq -r '.[] | [.id, .kickoff] | @tsv' "$tmp")

          echo "Found $(jq -r 'length' <<<"$out") games to schedule."
          echo "games_json=$(jq -c '.' <<<"$out")" >> "$GITHUB_OUTPUT"
